package zabbix

import ()

var New bool

/*
type AutoGenerated struct {
	Jsonrpc string   `json:"jsonrpc"`
	Result  []Result `json:"result"`
	ID      int      `json:"id"`
}
*/

type Host struct {
	Hostid            string `json:"hostid"`
	ProxyHostid       string `json:"proxy_hostid"`
	Host              string `json:"host"`
	Status            string `json:"status"`
	DisableUntil      string `json:"disable_until"`
	Error             string `json:"error"`
	Available         string `json:"available"`
	ErrorsFrom        string `json:"errors_from"`
	Lastaccess        string `json:"lastaccess"`
	IpmiAuthtype      string `json:"ipmi_authtype"`
	IpmiPrivilege     string `json:"ipmi_privilege"`
	IpmiUsername      string `json:"ipmi_username"`
	IpmiPassword      string `json:"ipmi_password"`
	IpmiDisableUntil  string `json:"ipmi_disable_until"`
	IpmiAvailable     string `json:"ipmi_available"`
	SnmpDisableUntil  string `json:"snmp_disable_until"`
	SnmpAvailable     string `json:"snmp_available"`
	Maintenanceid     string `json:"maintenanceid"`
	MaintenanceStatus string `json:"maintenance_status"`
	MaintenanceType   string `json:"maintenance_type"`
	MaintenanceFrom   string `json:"maintenance_from"`
	IpmiErrorsFrom    string `json:"ipmi_errors_from"`
	SnmpErrorsFrom    string `json:"snmp_errors_from"`
	IpmiError         string `json:"ipmi_error"`
	SnmpError         string `json:"snmp_error"`
	JmxDisableUntil   string `json:"jmx_disable_until"`
	JmxAvailable      string `json:"jmx_available"`
	JmxErrorsFrom     string `json:"jmx_errors_from"`
	JmxError          string `json:"jmx_error"`
	Name              string `json:"name"`
	Flags             string `json:"flags"`
	Templateid        string `json:"templateid"`
	Description       string `json:"description"`
	TLSConnect        string `json:"tls_connect"`
	TLSAccept         string `json:"tls_accept"`
	TLSIssuer         string `json:"tls_issuer"`
	TLSSubject        string `json:"tls_subject"`
	TLSPskIdentity    string `json:"tls_psk_identity"`
	TLSPsk            string `json:"tls_psk"`
	ProxyAddress      string `json:"proxy_address"`
	AutoCompress      string `json:"auto_compress"`
	Discover          string `json:"discover"`
	InventoryMode     string `json:"inventory_mode"`
}

/*
// HostGetParams represent the parameters for a `host.get` API call.
//
// See: https://www.zabbix.com/documentation/2.2/manual/api/reference/host/get#parameters
type HostGetParams struct {
	GetParameters

	// GroupIDs filters search results to hosts that are members of the given
	// Group IDs.
	GroupIDs []string `json:"groupids,omitempty"`

	// ApplicationIDs filters search results to hosts that have items in the
	// given Application IDs.
	ApplicationIDs []string `json:"applicationids,omitempty"`

	// DiscoveredServiceIDs filters search results to hosts that are related to
	// the given discovered service IDs.
	DiscoveredServiceIDs []string `json:"dserviceids,omitempty"`

	// GraphIDs filters search results to hosts that have the given graph IDs.
	GraphIDs []string `json:"graphids,omitempty"`

	// HostIDs filters search results to hosts that matched the given Host IDs.
	HostIDs []string `json:"hostids,omitempty"`

	// WebCheckIDs filters search results to hosts with the given Web Check IDs.
	WebCheckIDs []string `json:"httptestids,omitempty"`

	// InterfaceIDs filters search results to hosts that use the given Interface
	// IDs.
	InterfaceIDs []string `json:"interfaceids,omitempty"`

	// ItemIDs filters search results to hosts with the given Item IDs.
	ItemIDs []string `json:"itemids,omitempty"`

	// MaintenanceIDs filters search results to hosts that are affected by the
	// given Maintenance IDs
	MaintenanceIDs []string `json:"maintenanceids,omitempty"`

	// MonitoredOnly filters search results to return only monitored hosts.
	MonitoredOnly bool `json:"monitored_hosts,omitempty"`

	// ProxyOnly filters search results to hosts which are Zabbix proxies.
	ProxiesOnly bool `json:"proxy_host,omitempty"`

	// ProxyIDs filters search results to hosts monitored by the given Proxy
	// IDs.
	ProxyIDs []string `json:"proxyids,omitempty"`

	// IncludeTemplates extends search results to include Templates.
	IncludeTemplates bool `json:"templated_hosts,omitempty"`

	// SelectGroups causes the Host Groups that each Host belongs to to be
	// attached in the search results.
	SelectGroups SelectQuery `json:"selectGroups,omitempty"`

	// SelectApplications causes the Applications from each Host to be attached
	// in the search results.
	SelectApplications SelectQuery `json:"selectApplications,omitempty"`

	// SelectDiscoveries causes the Low-Level Discoveries from each Host to be
	// attached in the search results.
	SelectDiscoveries SelectQuery `json:"selectDiscoveries,omitempty"`

	// SelectDiscoveryRule causes the Low-Level Discovery Rule that created each
	// Host to be attached in the search results.
	SelectDiscoveryRule SelectQuery `json:"selectDiscoveryRule,omitempty"`

	// SelectGraphs causes the Graphs from each Host to be attached in the
	// search results.
	SelectGraphs SelectQuery `json:"selectGraphs,omitempty"`

	SelectHostDiscovery SelectQuery `json:"selectHostDiscovery,omitempty"`

	SelectWebScenarios SelectQuery `json:"selectHttpTests,omitempty"`

	SelectInterfaces SelectQuery `json:"selectInterfaces,omitempty"`

	SelectInventory SelectQuery `json:"selectInventory,omitempty"`

	SelectItems SelectQuery `json:"selectItems,omitempty"`

	SelectMacros SelectQuery `json:"selectMacros,omitempty"`

	SelectParentTemplates SelectQuery `json:"selectParentTemplates,omitempty"`
	SelectScreens         SelectQuery `json:"selectScreens,omitempty"`
	SelectTriggers        SelectQuery `json:"selectTriggers,omitempty"`
}

*/

/*
type HostInterface struct {
	// (readonly) ID of the interface.
	InterfaceID string `json:"interfaceid"`
	// (readonly) Availability of host interface.
	Available int `json:"available,string,omitempty"`
	// DNS name used by the interface.
	DNS string `json:"dns"`
	// IP address used by the interface.
	IP string `json:"ip"`
	// (readonly) Error text if host interface is unavailable.
	Error string `json:"error,omitempty"`
	// (readonly) Time when host interface became unavailable.
	ErrorsFrom *UnixTimestamp `json:"errors_from,string,omitempty"`
	// ID of the host the interface belongs to.
	HostID string `json:"hostid"`
	// Whether the interface is used as default on the host. Only one interface of some type can be set as default on a host.
	Main  ZBXBoolean `json:"main,string"`
	// Interface type.
	Type int `json:"type,string"`
	// Whether the connection should be made via IP.
	UseIP ZBXBoolean `json:"useip,string"`
}


*/

/*

type HostInterfaceGetParams struct {
	GetParameters

	// Return only host interfaces used by the given hosts.
	HostIDs []string `json:"hostids,omitempty"`

	// Return only host interfaces with the given IDs.
	InterfaceIDs []string `json:"interfaceids,omitempty"`

	// Return only host interfaces used by the given items.
	ItemIDs []string `json:"itemids,omitempty"`

	// Return only host interfaces used by items in the given triggers.
	TriggerIDs []string `json:"triggerids,omitempty"`
}
*/
